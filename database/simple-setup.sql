-- ========================================
-- SIMPLE DATABASE SETUP
-- ========================================

-- Step 1: Check what tables exist
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- Step 2: Create custom types
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'asset_type_enum') THEN
        CREATE TYPE public.asset_type_enum AS ENUM ('video', 'audio', 'image', 'document');
    END IF;
END $$;

-- Step 3: Create courses table
CREATE TABLE IF NOT EXISTS public.courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    imageurl TEXT,
    createdat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updatedat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Step 4: Create lessons table
CREATE TABLE IF NOT EXISTS public.lessons (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    courseid BIGINT NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    orderindex INTEGER NOT NULL,
    createdat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updatedat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Step 5: Create assets table
CREATE TABLE IF NOT EXISTS public.assets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lessonid BIGINT NOT NULL REFERENCES public.lessons(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    provider TEXT NOT NULL,
    providerkey TEXT NOT NULL,
    mimetype TEXT,
    sizebytes BIGINT,
    assettype public.asset_type_enum NOT NULL,
    createdat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updatedat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Step 6: Create progress table
CREATE TABLE IF NOT EXISTS public.progress (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userid UUID NOT NULL,
    lessonid BIGINT NOT NULL REFERENCES public.lessons(id) ON DELETE CASCADE,
    completed BOOLEAN DEFAULT false NOT NULL,
    progressjson JSONB,
    createdat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updatedat TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    UNIQUE(userid, lessonid)
);

-- Step 7: Create indexes
CREATE INDEX IF NOT EXISTS idx_lessons_courseid ON public.lessons(courseid);
CREATE INDEX IF NOT EXISTS idx_lessons_order ON public.lessons(courseid, orderindex);
CREATE INDEX IF NOT EXISTS idx_assets_lessonid ON public.assets(lessonid);
CREATE INDEX IF NOT EXISTS idx_assets_type ON public.assets(assettype);
CREATE INDEX IF NOT EXISTS idx_progress_userid ON public.progress(userid);
CREATE INDEX IF NOT EXISTS idx_progress_lessonid ON public.progress(lessonid);

-- Step 8: Enable RLS
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lessons ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progress ENABLE ROW LEVEL SECURITY;

-- Step 9: Create RLS policies
DROP POLICY IF EXISTS "Enable read access for all users" ON public.courses;
CREATE POLICY "Enable read access for all users" ON public.courses
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable read access for all users" ON public.lessons;
CREATE POLICY "Enable read access for all users" ON public.lessons
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable read access for all users" ON public.assets;
CREATE POLICY "Enable read access for all users" ON public.assets
    FOR SELECT USING (true);

DROP POLICY IF EXISTS "Enable read/write access for authenticated users" ON public.progress;
CREATE POLICY "Enable read/write access for authenticated users" ON public.progress
    FOR ALL USING (auth.uid() = userid) WITH CHECK (auth.uid() = userid);

-- Step 10: Check final status
SELECT 'Database setup completed!' as status;
SELECT COUNT(*) as courses_count FROM public.courses;
SELECT COUNT(*) as lessons_count FROM public.lessons;
SELECT COUNT(*) as assets_count FROM public.assets;
